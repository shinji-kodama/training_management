//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "interviews")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub project_participant_id: Uuid,
    pub interviewer_id: i32,
    pub scheduled_at: DateTimeWithTimeZone,
    pub status: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub notes: Option<String>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::project_participants::Entity",
        from = "Column::ProjectParticipantId",
        to = "super::project_participants::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    ProjectParticipants,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::InterviewerId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "Restrict"
    )]
    Users,
}

impl Related<super::project_participants::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProjectParticipants.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}
