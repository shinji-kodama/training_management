//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "training_materials")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub training_id: Uuid,
    pub material_id: Uuid,
    pub period_days: i32,
    pub order_index: i32,
    pub created_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::materials::Entity",
        from = "Column::MaterialId",
        to = "super::materials::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Materials,
    #[sea_orm(
        belongs_to = "super::trainings::Entity",
        from = "Column::TrainingId",
        to = "super::trainings::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Trainings,
}

impl Related<super::materials::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Materials.def()
    }
}

impl Related<super::trainings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Trainings.def()
    }
}
